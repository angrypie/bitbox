// Code generated by protoc-gen-go.
// source: bitbox.proto
// DO NOT EDIT!

/*
Package angrypie_bitbox is a generated protocol buffer package.

It is generated from these files:
	bitbox.proto

It has these top-level messages:
	StartRequest
	StatusResponse
	GenerateRequest
	SendRequest
	BalanceResponse
	Empty
*/
package angrypie_bitbox

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartRequest struct {
	// Number of bicoind nodes to be started
	Nodes int32 `protobuf:"varint,1,opt,name=nodes" json:"nodes,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartRequest) GetNodes() int32 {
	if m != nil {
		return m.Nodes
	}
	return 0
}

type StatusResponse struct {
	Status bool   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *StatusResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type GenerateRequest struct {
	// Id of bicoind node
	Node int32 `protobuf:"varint,1,opt,name=node" json:"node,omitempty"`
	// Number of block
	Blocks int32 `protobuf:"varint,2,opt,name=blocks" json:"blocks,omitempty"`
}

func (m *GenerateRequest) Reset()                    { *m = GenerateRequest{} }
func (m *GenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateRequest) ProtoMessage()               {}
func (*GenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GenerateRequest) GetNode() int32 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *GenerateRequest) GetBlocks() int32 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

type SendRequest struct {
	// Id of bicoind node
	Node int32 `protobuf:"varint,1,opt,name=node" json:"node,omitempty"`
	// bitcoin address
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// bitcoin to spend
	Amount float64 `protobuf:"fixed64,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SendRequest) GetNode() int32 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *SendRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SendRequest) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type BalanceResponse struct {
	Balance float64 `protobuf:"fixed64,1,opt,name=balance" json:"balance,omitempty"`
}

func (m *BalanceResponse) Reset()                    { *m = BalanceResponse{} }
func (m *BalanceResponse) String() string            { return proto.CompactTextString(m) }
func (*BalanceResponse) ProtoMessage()               {}
func (*BalanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BalanceResponse) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*StartRequest)(nil), "angrypie.bitbox.StartRequest")
	proto.RegisterType((*StatusResponse)(nil), "angrypie.bitbox.StatusResponse")
	proto.RegisterType((*GenerateRequest)(nil), "angrypie.bitbox.GenerateRequest")
	proto.RegisterType((*SendRequest)(nil), "angrypie.bitbox.SendRequest")
	proto.RegisterType((*BalanceResponse)(nil), "angrypie.bitbox.BalanceResponse")
	proto.RegisterType((*Empty)(nil), "angrypie.bitbox.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bitbox service

type BitboxClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	Balance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BalanceResponse, error)
}

type bitboxClient struct {
	cc *grpc.ClientConn
}

func NewBitboxClient(cc *grpc.ClientConn) BitboxClient {
	return &bitboxClient{cc}
}

func (c *bitboxClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/angrypie.bitbox.Bitbox/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitboxClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/angrypie.bitbox.Bitbox/Generate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitboxClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/angrypie.bitbox.Bitbox/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitboxClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/angrypie.bitbox.Bitbox/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitboxClient) Balance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := grpc.Invoke(ctx, "/angrypie.bitbox.Bitbox/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bitbox service

type BitboxServer interface {
	Start(context.Context, *StartRequest) (*StatusResponse, error)
	Generate(context.Context, *GenerateRequest) (*StatusResponse, error)
	Send(context.Context, *SendRequest) (*StatusResponse, error)
	Stop(context.Context, *Empty) (*StatusResponse, error)
	Balance(context.Context, *Empty) (*BalanceResponse, error)
}

func RegisterBitboxServer(s *grpc.Server, srv BitboxServer) {
	s.RegisterService(&_Bitbox_serviceDesc, srv)
}

func _Bitbox_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitboxServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/angrypie.bitbox.Bitbox/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitboxServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bitbox_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitboxServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/angrypie.bitbox.Bitbox/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitboxServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bitbox_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitboxServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/angrypie.bitbox.Bitbox/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitboxServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bitbox_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitboxServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/angrypie.bitbox.Bitbox/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitboxServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bitbox_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitboxServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/angrypie.bitbox.Bitbox/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitboxServer).Balance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bitbox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "angrypie.bitbox.Bitbox",
	HandlerType: (*BitboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Bitbox_Start_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _Bitbox_Generate_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Bitbox_Send_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Bitbox_Stop_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _Bitbox_Balance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitbox.proto",
}

func init() { proto.RegisterFile("bitbox.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x97, 0x6d, 0x5d, 0xe7, 0x73, 0x38, 0x09, 0x32, 0x8a, 0x28, 0x96, 0xe0, 0x61, 0x20,
	0xf4, 0xa0, 0x37, 0xc1, 0x83, 0x83, 0x31, 0x3c, 0x09, 0xe9, 0x27, 0x48, 0xd7, 0xc7, 0x18, 0x6e,
	0x49, 0x6d, 0x52, 0x70, 0x9f, 0xdc, 0xab, 0x34, 0x4d, 0x75, 0xb4, 0x2a, 0xbd, 0xe5, 0xff, 0xfa,
	0xf2, 0x7b, 0xbc, 0x5f, 0x03, 0x93, 0x64, 0x6b, 0x12, 0xf5, 0x11, 0x65, 0xb9, 0x32, 0x8a, 0x4e,
	0x85, 0xdc, 0xe4, 0x87, 0x6c, 0x8b, 0x51, 0x55, 0x66, 0xb7, 0x30, 0x89, 0x8d, 0xc8, 0x0d, 0xc7,
	0xf7, 0x02, 0xb5, 0xa1, 0x17, 0xe0, 0x49, 0x95, 0xa2, 0x0e, 0x48, 0x48, 0xe6, 0x1e, 0xaf, 0x02,
	0x7b, 0x84, 0xb3, 0xd8, 0x08, 0x53, 0x68, 0x8e, 0x3a, 0x53, 0x52, 0x23, 0x9d, 0xc1, 0x48, 0xdb,
	0x8a, 0x6d, 0x1c, 0x73, 0x97, 0xe8, 0x39, 0x0c, 0xf6, 0x7a, 0x13, 0xf4, 0x43, 0x32, 0x3f, 0xe1,
	0xe5, 0x91, 0x3d, 0xc1, 0x74, 0x85, 0x12, 0x73, 0x61, 0xb0, 0x1e, 0x42, 0x61, 0x58, 0x72, 0xdd,
	0x0c, 0x7b, 0x2e, 0x81, 0xc9, 0x4e, 0xad, 0xdf, 0xb4, 0xbd, 0xeb, 0x71, 0x97, 0x58, 0x0c, 0xa7,
	0x31, 0xca, 0xf4, 0xbf, 0xab, 0x01, 0xf8, 0x22, 0x4d, 0x73, 0xd4, 0xda, 0xcd, 0xad, 0x63, 0x09,
	0x15, 0x7b, 0x55, 0x48, 0x13, 0x0c, 0x42, 0x32, 0x27, 0xdc, 0x25, 0x76, 0x07, 0xd3, 0x85, 0xd8,
	0x09, 0xb9, 0xc6, 0xef, 0x85, 0x02, 0xf0, 0x93, 0xaa, 0x64, 0xd9, 0x84, 0xd7, 0x91, 0xf9, 0xe0,
	0x2d, 0xf7, 0x99, 0x39, 0xdc, 0x7f, 0xf6, 0x61, 0xb4, 0xb0, 0xda, 0xe8, 0x0b, 0x78, 0x56, 0x1b,
	0xbd, 0x8e, 0x1a, 0x46, 0xa3, 0x63, 0x9d, 0x97, 0x37, 0xbf, 0x7d, 0x3e, 0xf2, 0xc8, 0x7a, 0xf4,
	0x15, 0xc6, 0xb5, 0x1f, 0x1a, 0xb6, 0xda, 0x1b, 0xea, 0xba, 0x00, 0x57, 0x30, 0x2c, 0x8d, 0xd1,
	0xab, 0x76, 0xeb, 0x8f, 0xc8, 0x2e, 0xa0, 0x67, 0x18, 0xc6, 0x46, 0x65, 0x74, 0xd6, 0x6a, 0xb5,
	0x3e, 0xba, 0x20, 0x96, 0xe0, 0x3b, 0xd1, 0x7f, 0x52, 0xda, 0x3b, 0x37, 0x7e, 0x0d, 0xeb, 0x25,
	0x23, 0xfb, 0x7a, 0x1f, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x80, 0x25, 0x5f, 0xcd, 0x02,
	0x00, 0x00,
}
